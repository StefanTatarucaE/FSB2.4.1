# This is the workflow to deploy & configure Azure resources in the management subscription

name: example-environment-name | Mgmt Deployment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  deployInfoFile: ./input/example-customer-name/example-environment-name/example-environment-name.deployInfo.json
  workflowInfoFile: ./workflowInfo.json

  namingModulePath: ./helperModules/naming/
  namingScriptFile: ./scripts/Publish-AzResourceNames.ps1
  mgmtResourceNamesFile: ./mgmtNaming.json

  automationTemplateFile: ./parentModules/automation/automation.bicep
  automationMgmtTemplateParameterFile: ./input/example-customer-name/example-environment-name/parentModules/example-environment-name.mgmt.automation.params.json

  monitoringTemplateFile: ./parentModules/monitoring/monitoring.bicep
  monitoringMgmtTemplateParameterFile: ./input/example-customer-name/example-environment-name/parentModules/example-environment-name.mgmt.monitoring.params.json

  costManagementTemplateFile: ./parentModules/costManagement/costManagement.bicep
  costManagementTemplateParameterFilePath: ./input/example-customer-name/example-environment-name/parentModules/

  itsmTemplateFile: ./parentModules/itsm/itsm.bicep
  itsmMgmtTemplateParameterFile: ./input/example-customer-name/example-environment-name/parentModules/example-environment-name.mgmt.itsm.params.json
  itsmListenerArtifactPath: ./artifacts/functions/itsmListenerFunctionPwsh
  itsmLogicNetworkEventGridInputFile: ./parentModules/itsm/evgs-logic-network.json
  itsmLogicOsMgmtEventGridInputFile: ./parentModules/itsm/evgs-logic-osmgmt.json
  itsmLogicPaas1EventGridInputFile: ./parentModules/itsm/evgs-logic-paas-p1.json
  itsmLogicPaas2EventGridInputFile: ./parentModules/itsm/evgs-logic-paas-p2.json

  reportingTemplateFile: ./parentModules/reporting/reporting.bicep
  reportingArtifactPath: /artifacts/reporting/*
  reportingArtifactsContainer: artifacts
  reportingArtifactExclusions: README.md;*.docx

  meteringTemplateFile: ./parentModules/metering/metering.bicep
  meteringMgmtTemplateParameterFile: ./input/example-customer-name/example-environment-name/parentModules/example-environment-name.mgmt.metering.params.json
  meteringArtifactPath: ./artifacts/functions/billingFunction

  policyTemplateFile: ./parentModules/policy/policy.bicep
  policyMgmtTemplateParameterFile: ./input/example-customer-name/example-environment-name/parentModules/example-environment-name.mgmt.policy.params.json
  policyExemptionTemplateFile: ./parentModules/exemptions/exemptions.bicep

  vmOsManagementTemplateFile: ./parentModules/vmosmanagement/vmosmanagement.bicep
  vmOsManagementTemplateParameterPath: ./input/example-customer-name/example-environment-name/parentModules/
  vmOsManagementOsTaggingArtifactPath: ./artifacts/functions/OSTaggingFunction
  vmOsManagementFuncOsTaggingEventGridInputFile: ./parentModules/vmosmanagement/evgs-func-ostagging.json
  vmOsManagementRunbookEncryptEventGridInputFile: ./parentModules/vmosmanagement/evgs-rb-osdiskencrypt.json

  enterpriseResourceProviderScriptFile: ./scripts/Register-EnterpriseResourceProvider.ps1
  enterpriseResourceProviderInputFile: ./input/example-customer-name/example-environment-name/scripts/example-environment-name.mgmt.resourceProviders.json

  palScriptFile: ./scripts/New-CustomerPal.ps1
  copyAzItemScriptFile: ./scripts/Copy-AzItem.ps1
  msiPermissionsScriptFile: ./scripts/Add-RolesForMgmtResources.ps1
  publishAzFunctionScriptFile: ./scripts/Publish-AzFunctionApp.ps1
  initializeEventGridSubscriptionScriptFile: ./scripts/Initialize-EventGridSubscription.ps1
  startAutoRemediationForDinePoliciesScriptFile: ./scripts/Start-AutoRemediationForDinePolicies.ps1
  startAutomationRunbookScriptFile: ./scripts/Start-AutomationRunbook.ps1
  importModuleScriptFile: ./scripts/Invoke-Module.ps1
  publishGithubEnvironmentVarsScriptFile: ./scripts/Publish-GithubEnvironmentVariables.ps1
  publishWorkflowInfoScriptFile: ./scripts/Publish-WorkflowInfo.ps1

  outputPath: ./output/

# This workflow run is made up of 6 jobs that run sequentially
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runcore: ${{ steps.runjobs.outputs.runcore }}
      runnetwork: ${{ steps.runjobs.outputs.runnetwork }}
      runosmgmt: ${{ steps.runjobs.outputs.runosmgmt }}
      runpaas: ${{ steps.runjobs.outputs.runpaas }}
      runfinish: ${{ steps.runjobs.outputs.runfinish }}

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        id: runjobs
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'all'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Create Workflow Info
        env:
          mgmtSubscriptionId: ${{ secrets[env.mgmtSubscriptionSecret] }}
        run: |
          . '${{ env.publishWorkflowInfoScriptFile }}'

          $params = @{
            inputJson          = '${{ env.deployInfoFile }}'
            outputPath         = '${{ github.workspace }}'
            Verbose            = $true
          }
          Publish-WorkflowInfo @params

          if (Test-Path '${{ env.workflowInfoFile }}') {
            Copy-Item '${{ env.workflowInfoFile }}' -Destination '${{ env.outputPath }}' -Verbose
          } else {
            Write-Error "Copying the workflowInfo.json file to the output folder failed..." -ErrorAction 'Stop'
          }
        shell: pwsh

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Generate Resource Names - mgmt
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.namingScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $params = @{
              bicepTemplatePath     = '${{ env.namingModulePath }}'
              outputPath            = '${{ env.outputPath }}'
              azRegion              = $workflowInfo.subscriptionDeployLocation
              organizationCode      = $workflowInfo.organizationCode
              environmentCode       = $workflowInfo.mgmtEnvironmentCode
              subscriptionCode      = $workflowInfo.mgmtSubscriptionCode
              subscriptionType      = 'mgmt'
            }
            Publish-AzResourceNames @params
          azPSVersion: "latest"

      - name: Generate Resource Names - cnty
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.namingScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $params = @{
              bicepTemplatePath     = '${{ env.namingModulePath }}'
              outputPath            = '${{ env.outputPath }}'
              azRegion              = $workflowInfo.subscriptionDeployLocation
              organizationCode      = $workflowInfo.organizationCode
              environmentCode       = $workflowInfo.cntyEnvironmentCode
              subscriptionCode      = $workflowInfo.cntySubscriptionCode
              subscriptionType      = 'cnty'
            }
            Publish-AzResourceNames @params
          azPSVersion: "latest"

      - name: Generate Resource Names - lndz
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.namingScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $params = @{
              bicepTemplatePath     = '${{ env.namingModulePath }}'
              outputPath            = '${{ env.outputPath }}'
              azRegion              = $workflowInfo.subscriptionDeployLocation
              organizationCode      = $workflowInfo.organizationCode
              environmentCode       = $workflowInfo.lndzEnvironmentCode
              subscriptionCode      = $workflowInfo.lndzSubscriptionCode
              subscriptionType      = 'lndz'
            }
            Publish-AzResourceNames @params
          azPSVersion: "latest"

      - name: Generate Resource Names - tool
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.namingScriptFile }}'
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $params = @{
              bicepTemplatePath     = '${{ env.namingModulePath }}'
              outputPath            = '${{ env.outputPath }}'
              azRegion              = $workflowInfo.subscriptionDeployLocation
              organizationCode      = $workflowInfo.organizationCode
              environmentCode       = $workflowInfo.toolEnvironmentCode
              subscriptionCode      = $workflowInfo.toolSubscriptionCode
              subscriptionType      = 'tool'
            }
            Publish-AzResourceNames @params
          azPSVersion: "latest"

      - name: Upload Resource Names
        uses: actions/upload-artifact@v4
        with:
          name: naming
          path: output/

      - name: Cleanup temporary Azure Resources
        if: ${{ success() }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            Get-AzResourceGroup | Where-Object {$_.ResourceGroupName -like '*deleteme'} | Remove-AzResourceGroup -Force -Verbose
          azPSVersion: "latest"

  core:
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.runcore == 'yes' }}

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'login'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Download Workflow Artifact
        uses: actions/download-artifact@v4
        with:
          name: naming

      - name: Login to AzureDeployment
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Automation
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-automation")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.automationTemplateFile }}'
              TemplateParameterFile = '${{ env.automationMgmtTemplateParameterFile }}'
              deploymentType        = 'deploy'
              typeOfArtifacts       = 'core'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Monitoring Core
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-monitoring")
            $subDeployParams = @{
              Name                        = $deploymentName
              Location                    = $workflowInfo.subscriptionDeployLocation
              TemplateFile                = '${{ env.monitoringTemplateFile }}'
              TemplateParameterFile       = '${{ env.monitoringMgmtTemplateParameterFile }}'
              managementSubscriptionId    = $workflowInfo.mgmtSubscriptionId
              subscriptionType            = 'mgmt'
              deploymentScope             = 'core'
              callerServicePrincipalAppId = '${{ secrets[env.clientSecret] }}'
              Verbose                     = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy ITSM
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-itsm")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.itsmTemplateFile }}'
              TemplateParameterFile = '${{ env.itsmMgmtTemplateParameterFile }}'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Reporting Core
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-reporting")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.reportingTemplateFile }}'
              deploymentScope       = 'core'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Metering
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-metering")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.meteringTemplateFile }}'
              TemplateParameterFile = '${{ env.meteringMgmtTemplateParameterFile }}'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Policy Core AuditDeny
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-auditdeny-policy")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.policyTemplateFile }}'
              TemplateParameterFile = '${{ env.policyMgmtTemplateParameterFile }}'
              coreAuditDenyPolicies = $true
              managementSubscriptionId = $workflowInfo.mgmtSubscriptionId
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Policy Network AuditDeny
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-network-auditdeny-policy")
            $subDeployParams = @{
              Name                     = $deploymentName
              Location                 = $workflowInfo.subscriptionDeployLocation
              TemplateFile             = '${{ env.policyTemplateFile }}'
              TemplateParameterFile    = '${{ env.policyMgmtTemplateParameterFile }}'
              networkAuditDenyPolicies = $true
              Verbose                  = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Policy OsMgmt AuditDeny
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-network-auditdeny-policy")
            $subDeployParams = @{
              Name                    = $deploymentName
              Location                = $workflowInfo.subscriptionDeployLocation
              TemplateFile            = '${{ env.policyTemplateFile }}'
              TemplateParameterFile   = '${{ env.policyMgmtTemplateParameterFile }}'
              osmgmtAuditDenyPolicies = $true
              Verbose                 = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Policy Paas AuditDeny
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-network-auditdeny-policy")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.policyTemplateFile }}'
              TemplateParameterFile = '${{ env.policyMgmtTemplateParameterFile }}'
              paasAuditDenyPolicies = $true
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Policy Core change
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-change-policy")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.policyTemplateFile }}'
              TemplateParameterFile = '${{ env.policyMgmtTemplateParameterFile }}'
              coreChangePolicies    = $true
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams 
          azPSVersion: "latest"

      - name: Configure Automation Core
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-automation-core-runbooks")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.automationTemplateFile }}'
              TemplateParameterFile = '${{ env.automationMgmtTemplateParameterFile }}'
              deploymentType        = 'config'
              typeOfArtifacts       = 'core'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Configure Monitoring Core
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-automation-core-runbooks")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.automationTemplateFile }}'
              TemplateParameterFile = '${{ env.automationMgmtTemplateParameterFile }}'
              deploymentType        = 'config'
              typeOfArtifacts       = 'monitoring-core'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"  

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure ITSM function
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.publishAzFunctionScriptFile }}'
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $scriptParams = @{
              functionListInApp         = @('itsm-al-listener-atf2')
              functionApp               = $resourceNames.customerItsmPwshFunctionApp.name
              functionAppResourceGroup  = $resourceNames.managementItsmResourceGroup.name
              localFunctionPath         = '${{ env.itsmListenerArtifactPath }}'
              Verbose                   = $true
            }
            Publish-AzFunctionApp @scriptParams
          azPSVersion: "latest"

      - name: Configure Reporting Core
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.copyAzItemScriptFile }}'
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $saParams = @{
              ResourceGroupName = $resourceNames.mgmtReportingResourceGroup.name
              AccountName       = $resourceNames.managementReportingStorageAccount.name
            }
            $storageAccount = Get-AzStorageAccount @saParams
            $storageAccount | Enable-AzStorageStaticWebsite
            $copyParams = @{
              storageAccountName = $resourceNames.managementReportingStorageAccount.name
              resourceGroupName  = $resourceNames.mgmtReportingResourceGroup.name
              containerName      = '${{ env.reportingArtifactsContainer }}'
              pathToUpload       = '${{ github.workspace }}${{ env.reportingArtifactPath }}'
              exclusions         = '${{ env.reportingArtifactExclusions }}'
            }
            Copy-AzItem @copyParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Metering function
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.publishAzFunctionScriptFile }}'
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $scriptParams = @{
              functionListInApp         = @('billingupload','billingUploadFIT','getFITFile')
              functionApp               = $resourceNames.customerBillingFunctionApp.name
              functionAppResourceGroup  = $resourceNames.customerBillingResourceGroup.name
              localFunctionPath         = '${{ env.meteringArtifactPath }}'
              Verbose                   = $true
            }
            Publish-AzFunctionApp @scriptParams
          azPSVersion: "9.3.0"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Resource Providers
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.enterpriseResourceProviderScriptFile }}'

            $inputJson = Get-Content -Path '${{ env.enterpriseResourceProviderInputFile }}' -Raw | ConvertFrom-Json
            $inputJson.resourceProvider.core | Register-EnterpriseResourceProvider
          azPSVersion: "7.5.0"

      - name: Configure PAL Customer
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.palScriptFile }}'

            New-CustomerPal -PartnerId '0'
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Cost Management
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $file = ($workflowInfo.costManagementMgmtTemplateParameterFile).ToLower()
            $costManagementMgmtTemplateParameterFile = Join-Path -Path '${{ env.costManagementTemplateParameterFilePath }}' -ChildPath $file

            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-core-costmanagement")
            $subDeployParams = @{
              Name                     = $deploymentName
              Location                 = $workflowInfo.subscriptionDeployLocation
              TemplateFile             = '${{ env.costManagementTemplateFile }}'
              TemplateParameterFile    = $costManagementMgmtTemplateParameterFile
              managementSubscriptionId = $workflowInfo.mgmtSubscriptionId
              Verbose                  = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "7.5.0"

  network:
    needs: [prepare, core]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.runnetwork == 'yes' && always() && !cancelled() }} 

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'login'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Download Workflow Artifact
        uses: actions/download-artifact@v4
        with:
          name: naming

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Monitoring Network
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-network-monitoring")
            $subDeployParams = @{
              Name                        = $deploymentName
              Location                    = $workflowInfo.subscriptionDeployLocation
              TemplateFile                = '${{ env.monitoringTemplateFile }}'
              TemplateParameterFile       = '${{ env.monitoringMgmtTemplateParameterFile }}'
              managementSubscriptionId    = $workflowInfo.mgmtSubscriptionId
              subscriptionType            = 'mgmt'
              deploymentScope             = 'network'
              callerServicePrincipalAppId = '${{ secrets[env.clientSecret] }}'
              Verbose                     = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Reporting Network
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-network-reporting")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.reportingTemplateFile }}'
              deploymentScope       = 'network'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Eventgrid Subscription - ITSM LogicApp (Network)
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.initializeEventGridSubscriptionScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $evgsParams = @{
              eventSubscriptionName = $resourceNames.eventgridSubscriptionLogicItsmNetwork.name
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              sourceSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              inputJson             = '${{ env.itsmLogicNetworkEventGridInputFile }}'
              resourceTagName       = $resourceNames.tagPrefix.name + 'Purpose'
              resourceTagValue      = $resourceNames.tagValuePrefix.name + 'ItsmCmdb'
              Verbose               = $true
            }
            Initialize-EventGridSubscription @evgsParams
          azPSVersion: "latest"

  osmgmt:
    needs: [prepare, core, network]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.runosmgmt == 'yes' && always() && !cancelled() }} 

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'login'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Download Workflow Artifact
        uses: actions/download-artifact@v4
        with:
          name: naming

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy VM OS Management
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $file = ($workflowInfo.vmOsMgmtMgmtTemplateParameterFile).ToLower()
            $vmOsMgmtMgmtTemplateParameterFile = Join-Path -Path '${{ env.vmOsManagementTemplateParameterPath }}' -ChildPath $file

            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-osmgmt-vmosmgmt")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.vmOsManagementTemplateFile }}'
              TemplateParameterFile = $vmOsMgmtMgmtTemplateParameterFile
              subscriptionType      = 'mgmt'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"
      
      - name: Deploy Monitoring OSMgmt
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-osmgmt-monitoring")
            $subDeployParams = @{
              Name                     = $deploymentName
              Location                 = $workflowInfo.subscriptionDeployLocation
              TemplateFile             = '${{ env.monitoringTemplateFile }}'
              TemplateParameterFile    = '${{ env.monitoringMgmtTemplateParameterFile }}'
              managementSubscriptionId = $workflowInfo.mgmtSubscriptionId              
              subscriptionType         = 'mgmt'
              deploymentScope          = 'osmgmt'
              Verbose                  = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Reporting
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-osmgmt-reporting")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.reportingTemplateFile }}'
              deploymentScope       = 'osmgmt'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest" 

      - name: Deploy Policy OSMGMT Change
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-change-osmgmt-policy")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.policyTemplateFile }}'
              TemplateParameterFile = '${{ env.policyMgmtTemplateParameterFile }}'
              osMgmtChangePolicies  = $true
              managementSubscriptionId = $workflowInfo.mgmtSubscriptionId
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams 
          azPSVersion: "latest"

      - name: Configure Automation OS Management
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-automation-osmgmt-runbooks")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.automationTemplateFile }}'
              TemplateParameterFile = '${{ env.automationMgmtTemplateParameterFile }}'
              deploymentType        = 'config'
              typeOfArtifacts       = 'os-mgmt'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Legacy Monitoring agent migration - Disable the Automation Runbook schedule
        uses: azure/powershell@v2
        with:
          inlineScript: |
            # This step is needed to make sure the new runbook schedule for AMA migration is disabled after deployment.
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json
            $params = @{
              AutomationAccountName = $resourceNames.customerAutomationAccount.name
              ResourceGroupName 	  = $resourceNames.customerAutomationResourceGroup.name
              Name 			            = "OSMGMT-Remove-LegacyLogAnalyticsAgent"
              IsEnabled 		        = $false
            }
            Set-AzAutomationSchedule @params | Out-null
          azPSVersion: "latest"

      - name: Legacy Monitoring agent migration - Remove Old Log Analytics Monitoring Agent Policy OSMGMT change
        uses: azure/powershell@v2
        with:
          inlineScript: |
            # Removes old Log Analytics agent change policies that exist in release 2.3 and before
            # This step should be kept for some time for brownfield update scenarios
            $oldPolicyNames = (Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json).oldLogAnalyticsAgentPolicy
            Remove-AzPolicyAssignment -Name $oldPolicyNames.vmEnableLogAnalyticsAgentSetAssignmentName -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicyAssignment -Name $oldPolicyNames.vmssEnableLogAnalyticsAgentSetAssignmentName -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicySetDefinition -Name $oldPolicyNames.vmEnableLogAnalyticsAgentSetName -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicySetDefinition -Name $oldPolicyNames.vmssEnableLogAnalyticsAgentSetName -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicyDefinition -Name $oldPolicyNames.vmEnableLogAnalyticsAgentLinuxDefName -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicyDefinition -Name $oldPolicyNames.vmEnableLogAnalyticsAgentWinDefName -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicyDefinition -Name $oldPolicyNames.vmssEnableLogAnalyticsAgentLinuxDefName -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
            Remove-AzPolicyDefinition -Name $oldPolicyNames.vmssEnableLogAnalyticsAgentWinDefName -Force -WarningAction SilentlyContinue -ErrorAction SilentlyContinue | Out-Null
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure OS Tagging function
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'
                      
            . '${{ env.publishAzFunctionScriptFile }}'
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $scriptParams = @{
              functionListInApp         = @('checkForSupportingOsVm')
              functionApp               = $resourceNames.osTaggingFuncApp.name
              functionAppResourceGroup  = $resourceNames.osTaggingResourceGroup.name
              localFunctionPath         = '${{ env.vmOsManagementOsTaggingArtifactPath }}'
              Verbose                   = $true
            }
            Publish-AzFunctionApp @scriptParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Eventgrid Subscription - ITSM LogicApp (OsMgmt)
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.initializeEventGridSubscriptionScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $evgsParams = @{
              eventSubscriptionName = $resourceNames.eventgridSubscriptionLogicItsmOsMgmt.name
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              sourceSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              resourceTagName       = $resourceNames.tagPrefix.name + 'Purpose'
              resourceTagValue      = $resourceNames.tagValuePrefix.name + 'ItsmCmdb'
              inputJson             = '${{ env.itsmLogicOsMgmtEventGridInputFile }}'
              Verbose               = $true
            }
            Initialize-EventGridSubscription @evgsParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Eventgrid Subscription - OSTagging FunctionApp
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.initializeEventGridSubscriptionScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $evgsParams = @{
              eventSubscriptionName = $resourceNames.eventgridSubscriptionFuncOsTagging.name
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              sourceSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              resourceTagName       = $resourceNames.tagPrefix.name + 'Purpose'
              resourceTagValue      = 'FuncOsTagging'
              inputJson             = '${{ env.vmOsManagementFuncOsTaggingEventGridInputFile  }}'
              Verbose               = $true
            }
            Initialize-EventGridSubscription @evgsParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Eventgrid Subscription - Disk Encryption Runbook
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.initializeEventGridSubscriptionScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $evgsParams = @{
              eventSubscriptionName = $resourceNames.eventgridSubscriptionRbOsDiskEncrypt.name
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              sourceSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              subscriptionCode      = $workflowInfo.mgmtSubscriptionCode
              resourceTagName       = $resourceNames.tagPrefix.name + 'Purpose'
              resourceTagValue      = 'RunbookOsDiskEncrypt'
              inputJson             = '${{ env.vmOsManagementRunbookEncryptEventGridInputFile }}'
              Verbose               = $true
            }
            Initialize-EventGridSubscription @evgsParams
          azPSVersion: "latest"

  paas:
    needs: [prepare, core, network, osmgmt]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.runpaas == 'yes' && always() && !cancelled() }} 

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'login'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Download Workflow Artifact
        uses: actions/download-artifact@v4
        with:
          name: naming

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Monitoring PaaS
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-paas-monitoring")
            $subDeployParams = @{
              Name                     = $deploymentName
              Location                 = $workflowInfo.subscriptionDeployLocation
              TemplateFile             = '${{ env.monitoringTemplateFile }}'
              TemplateParameterFile    = '${{ env.monitoringMgmtTemplateParameterFile }}'
              managementSubscriptionId = $workflowInfo.mgmtSubscriptionId
              subscriptionType         = 'mgmt'
              deploymentScope          = 'paas'
              Verbose                  = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Reporting PaaS
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-paas-reporting")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.reportingTemplateFile }}'
              deploymentScope       = 'paas'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Deploy Policy PaaS Change
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-change-paas-policy")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.policyTemplateFile }}'
              TemplateParameterFile = '${{ env.policyMgmtTemplateParameterFile }}'
              managementSubscriptionId = $workflowInfo.mgmtSubscriptionId
              paasChangePolicies    = $true
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Configure Automation Paas Management
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-automation-paasmgmt-runbooks")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.automationTemplateFile }}'
              TemplateParameterFile = '${{ env.automationMgmtTemplateParameterFile }}'
              deploymentType        = 'config'
              typeOfArtifacts       = 'paas-mgmt'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Eventgrid Subscription - ITSM LogicApp (Paas1)
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.initializeEventGridSubscriptionScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $evgsParams = @{
              eventSubscriptionName = $resourceNames.eventgridSubscriptionLogicItsmPaas1.name
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              sourceSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              resourceTagName       = $resourceNames.tagPrefix.name + 'Purpose'
              resourceTagValue      = $resourceNames.tagValuePrefix.name + 'ItsmCmdb'
              inputJson             = '${{ env.itsmLogicPaas1EventGridInputFile }}'
              Verbose               = $true
            }
            Initialize-EventGridSubscription @evgsParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Eventgrid Subscription - ITSM LogicApp (Paas2)
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'

            . '${{ env.initializeEventGridSubscriptionScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $evgsParams = @{
              eventSubscriptionName = $resourceNames.eventgridSubscriptionLogicItsmPaas2.name
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              sourceSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              resourceTagName       = $resourceNames.tagPrefix.name + 'Purpose'
              resourceTagValue      = $resourceNames.tagValuePrefix.name + 'ItsmCmdb'
              inputJson             = '${{ env.itsmLogicPaas2EventGridInputFile }}'
              Verbose               = $true
            }
            Initialize-EventGridSubscription @evgsParams
          azPSVersion: "latest"

  finish:
    needs: [prepare, core, osmgmt, paas]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.runfinish == 'yes' && always() && !cancelled() }} 

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'login'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Download Workflow Artifact
        uses: actions/download-artifact@v4
        with:
          name: naming

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Policy Exemptions
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-mgmt-exemptions")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.policyExemptionTemplateFile }}'
              subscriptionType      = 'mgmt'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure Managed Identity RBAC
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.ResourceGraph' -moduleVersion '0.13.0'
            
            . '${{ env.msiPermissionsScriptFile }}'

            $scriptParams = @{
              sourceSubscriptionId = $workflowInfo.mgmtSubscriptionId
              targetSubscriptionId = $workflowInfo.mgmtSubscriptionId
              tagPrefix            = $resourceNames.tagPrefix.name
              tagValuePrefix       = $resourceNames.tagValuePrefix.name
              Verbose              = $true
            }
            Add-RolesForMgmtResources @scriptParams  
          azPSVersion: "latest"
            
      - name: Configure Policy Compliance Scan
        uses: azure/powershell@v2
        with: 
          inlineScript: |
            Start-AzPolicyComplianceScan -Verbose
          azPSVersion: "latest"

# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure DINE Policy Auto Remediation
        uses: azure/powershell@v2
        with: 
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            . '${{ env.startAutoRemediationForDinePoliciesScriptFile }}'

            $params = @{
              targetSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              mgmtSubscriptionId  = $workflowInfo.mgmtSubscriptionId
              tagPrefix            = $resourceNames.tagPrefix.name
              tagValuePrefix       = $resourceNames.tagValuePrefix.name
            }
            Start-AutoRemediationForDinePolicies @params -Verbose
          azPSVersion: "7.5.0"
          
# Re-Login is needed as the next job is not using the latest version of Powershell and it cannot handle token refresh 
      - name: Re-Login to Azure (temporary workaround)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Configure EventGrid Webhook expiry
        uses: azure/powershell@v2
        with: 
          inlineScript: |
            . '${{ env.importModuleScriptFile }}'
            Invoke-Module -moduleName 'Az.Automation'

            . '${{ env.startAutomationRunbookScriptFile }}'

            $params = @{
              runbookName = "Update-EventGridAutomationWebhook"
              Verbose     = $true
            }
            Start-AutomationRunbook @params
          azPSVersion: "9.2.0"

# This is the workflow to deploy & configure Azure resources
# in the management subscription(s) the Eviden Landingzones for Azure solution.

name: example-environment-name | Bootstrap Deployment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  deployInfoFile: ./input/example-customer-name/example-environment-name/example-environment-name.deployInfo.json
  workflowInfoFile: ./workflowInfo.json

  namingModulePath: ./helperModules/naming/
  namingScriptFile: ./scripts/Publish-AzResourceNames.ps1
  mgmtResourceNamesFile: ./mgmtNaming.json

  bootstrapTemplateFile: ./parentModules/bootstrap/bootstrap.bicep
  bootstrapTemplateParameterFile: ./input/example-customer-name/example-environment-name/parentModules/example-environment-name.mgmt.bootstrap.params.json

  ipGroupTemplateFile: ./childModules/ipGroup/ipGroup.bicep
  ipGroupJsonPath: ./input/example-customer-name/example-environment-name/parentModules/
  deployIpGroupScriptFile: ./scripts/Deploy-AzIpGroups.ps1

  runbooksArtifactPath: /artifacts/runbooks/*
  runbookArtifactExclusions: README.md;*.csv

  copyAzItemScriptFile: ./scripts/Copy-AzItem.ps1
  copyAzItemSubFolder: runbooks

  publishGithubEnvironmentVarsScriptFile: ./scripts/Publish-GithubEnvironmentVariables.ps1
  publishWorkflowInfoScriptFile: ./scripts/Publish-WorkflowInfo.ps1

  outputPath: ./output

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      runIpGroupsPreReq: ${{ steps.runjobs.outputs.runIpGroupsPreReq }}

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        id: runjobs
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'all'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Create Workflow Info
        env:
          mgmtSubscriptionId: ${{ secrets[env.mgmtSubscriptionSecret] }}
        run: |
          . '${{ env.publishWorkflowInfoScriptFile }}'

          $params = @{
            inputJson          = '${{ env.deployInfoFile }}'
            outputPath         = '${{ github.workspace }}'
            Verbose            = $true
          }
          Publish-WorkflowInfo @params

          if (Test-Path '${{ env.workflowInfoFile }}') {
            Copy-Item '${{ env.workflowInfoFile }}' -Destination '${{ env.outputPath }}' -Verbose
          } else {
            Write-Error "Copying the workflowInfo.json file to the output folder failed..." -ErrorAction 'Stop'
          }
        shell: pwsh

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Generate Resource Names - mgmt
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.namingScriptFile }}'

            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $params = @{
              bicepTemplatePath     = '${{ env.namingModulePath }}'
              outputPath            = '${{ env.outputPath }}'
              azRegion              = $workflowInfo.subscriptionDeployLocation
              organizationCode      = $workflowInfo.organizationCode
              environmentCode       = $workflowInfo.mgmtEnvironmentCode
              subscriptionCode      = $workflowInfo.mgmtSubscriptionCode
              subscriptionType      = 'mgmt'
            }
            Publish-AzResourceNames @params
          azPSVersion: "latest"

      - name: Upload Resource Names
        uses: actions/upload-artifact@v4
        with:
          name: naming
          path: output/

      - name: Cleanup temporary Azure Resources
        if: ${{ success() }}
        uses: azure/powershell@v2
        with:
          inlineScript: |
            Get-AzResourceGroup | Where-Object {$_.ResourceGroupName -like '*deleteme'} | Remove-AzResourceGroup -Force -Verbose
          azPSVersion: "latest"

  core:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
            inputJson        = '${{ env.deployInfoFile }}'
            scope            = 'login'
            subscriptionType = 'mgmt'
            Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params
        shell: pwsh

      - name: Download Workflow Artifact
        uses: actions/download-artifact@v4
        with:
          name: naming

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Bootstrap
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $workflowInfo = Get-Content -Path '${{ env.workflowInfoFile }}' -Raw | ConvertFrom-Json
            $deploymentName = -join ("$Env:GITHUB_RUN_ID", "-Bootstrap")
            $subDeployParams = @{
              Name                  = $deploymentName
              Location              = $workflowInfo.subscriptionDeployLocation
              TemplateFile          = '${{ env.bootstrapTemplateFile }}'
              TemplateParameterFile = '${{ env.bootstrapTemplateParameterFile }}'
              Verbose               = $true
            }
            New-AzSubscriptionDeployment @subDeployParams
          azPSVersion: "latest"

      - name: Configure Bootstrap
        uses: azure/powershell@v2
        with:
          inlineScript: |
            . '${{ env.copyAzItemScriptFile }}'
            $resourceNames = Get-Content -Path '${{ env.mgmtResourceNamesFile }}' -Raw | ConvertFrom-Json

            $copyParams = @{
              storageAccountName = $resourceNames.artifactStorageAccount.name
              resourceGroupName  = $resourceNames.bootstrapResourceGroup.name
              containerName      = $resourceNames.productCode.name.toLower() + '-artifacts'
              pathToUpload       = '${{ github.workspace }}${{ env.runbooksArtifactPath }}'
              subfolder          = '${{ env.copyAzItemSubFolder }}'
              exclusions         = '${{ env.runbookArtifactExclusions }}'
              Verbose            = $true
            }
            Copy-AzItem @copyParams
          azPSVersion: "latest"

  customer_ipgroups:
    runs-on: ubuntu-latest
    needs: [prepare]
    if: ${{ needs.prepare.outputs.runIpGroupsPreReq == 'yes' && always() && !cancelled() }}

    steps:
      - uses: actions/checkout@v4
      - name: Populate Environment Variables
        run: |
          . '${{ env.publishGithubEnvironmentVarsScriptFile }}'

          $params = @{
          inputJson        = '${{ env.deployInfoFile }}'
          scope            = 'login'
          subscriptionType = 'cnty'
          Verbose          = $true
          }
          Publish-GithubEnvironmentVariables @params

        shell: pwsh

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[env.clientSecret] }}
          tenant-id: ${{ secrets[env.tenantSecret] }}
          subscription-id: ${{ secrets[env.subscriptionSecret] }}
          enable-AzPSSession: true

      - name: Deploy Customer IpGroups
        uses: azure/powershell@v2
        id: deploy_network_bootstrap
        with:
          inlineScript: |
           . '${{ env.deployIpGroupScriptFile }}'

            $params = @{
              outputPath            = '${{ env.outputPath }}'
              ipGrouptemplateFile   = '${{ env.ipGroupTemplateFile }}'
              ipGroupJsonPath       = '${{ env.ipGroupJsonPath }}'
              whatIfBool            = $false
              Verbose               = $true
            }
            Deploy-AzIpGroups @params
          azPSVersion: "latest"

      - name: Upload ipGroups
        uses: actions/upload-artifact@v4
        with:
          name: IpGroups.json
          path: output/

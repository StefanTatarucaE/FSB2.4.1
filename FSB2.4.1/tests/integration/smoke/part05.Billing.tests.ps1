##
## Eviden Landingzones for Azure - Feature test
##

Describe 'Smoke and Sanity Testing for ELZ Azure Solution' {

    BeforeAll {
        Set-AzContext -Subscription $custMgmtSubscriptionId -tenant $tenantId -ErrorAction Stop | Out-Null 
        $dateTime = (Get-Date).ToString()
        $laWorkspace = get-logAnalyticsWorkspace -custMgmtSubscriptionId $custMgmtSubscriptionId -tenantId $tenantId -tagPrefix $tagPrefix -tagValuePrefix $tagValuePrefix
        $functionApp = search-azureResourceByTag -resourceType Microsoft.Web/sites -tags @{"${tagPrefix}Purpose" = "${tagValuePrefix}Billing"}
        $storageAccount = search-azureResourceByTag -resourceType Microsoft.Storage/storageAccounts -tags @{"${tagPrefix}Purpose" = "${tagValuePrefix}Billing"}
        $storageAccountContext = get-storageAccountContext -storageAccount $storageAccount
        $functions = get-functionAppFunctions -resourceId $functionApp.ResourceId
        $function = "billingupload"
    }

    Context 'Billing Solution' {
        It 'Check if function is present' {
            # Ensure that function exists in functionapp
            $becauseText = 'Billing function should be present in the function app' + ' Checked at: ' + $($dateTime)
            $function | Should -BeIn $functions.properties.name `
            -Because $becauseText
        }
        It 'Check if function run successfully' {
            # Starts function
            $params = @{
                functionApp = $functionApp
                functionName = $function
            }
            $Result = start-functionAppFunction @params
            # Ensure that function is run successfully
            $params = @{
                resourceId = $functionApp.ResourceId
                functionName = $function
                logAnalyticsWorkspace = $laWorkspace
                searchText = "Billing function completed"
                timeRange = '5m'
                tenantId = $tenantId
            }
            $becauseText = 'Billing function should report that execution succeeded in functionAppLogs' + ' Checked at: ' + $($dateTime)
            $qOut = wait-loop -numberOfRetries 10 -sleepTime 30 -command get-functionAppLogsResult -params $params
            $qOut.Result | Should -Not -Be 'Failed' `
                -Because $becauseText
        }

        It 'Check if billing container is present' {
            $becauseText = 'The billing-output container should be present in the storage account' + ' Checked at: ' + $($dateTime)
            $containers = Get-AzStorageContainer -Context $storageAccountContext
            "billing-output" | Should -BeIn $containers.Name `
            -Because $becauseText
        }
        It 'Step09-07 Check if all CSV files are generated' {
            $params = @{
                storageAccountContext = $storageAccountContext
                containerName = "billing-output"
                HistoryInMinutes = 0
            }
            $blobFiles = get-storageAccountBlobFiles @params
            $becauseTxt = 'CSV file with name containing [[name]] should be generated by the BILLING function' + ' Checked at: ' + $($dateTime)
            $fileNamingArray = @(
                "GLB_${productCode}_ALL_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_CUSTOM_POLICIES_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_IMAGE_GALLERY_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_INST_VM_BACKUP_TAG_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_INST_VM_PATCH_TAG_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_SPOKES_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_SUBS_MSB-AZURE-FUNCTION",
                "GLB_${productCode}_SVC_MSB-AZURE-FUNCTION",
                $custCntySubscriptionId+"_GB_GLB_${productCode}_AZU-OS_MSB-AZURE-FUNCTION",
                $custCntySubscriptionId+"_GB_GLB_${productCode}_AZU-COST_MSB-AZURE-FUNCTION",
                $custMgmtSubscriptionId+"_GB_GLB_${productCode}_AZU-OS_MSB-AZURE-FUNCTION",
                $custMgmtSubscriptionId+"_GB_GLB_${productCode}_AZU-COST_MSB-AZURE-FUNCTION",
                $custLndzSubscriptionId+"_GB_GLB_${productCode}_AZU-OS_MSB-AZURE-FUNCTION",
                $custLndzSubscriptionId+"_GB_GLB_${productCode}_AZU-COST_MSB-AZURE-FUNCTION"
            )
            ForEach ($fileNaming in $fileNamingArray) {
                find-partialStringInArray -array $blobFiles.Name -partialString $fileNaming | Should -Be $true -Because $becauseTxt.Replace("[name]",$fileNaming)
            }
        }
    }

    AfterAll {
    }
}
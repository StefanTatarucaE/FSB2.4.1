/*
SUMMARY: Anti Malware Windows Policy child module.
DESCRIPTION: Deployment of Anti Malware Windows Policy. Consists of definition,assignment & role assignment.
AUTHOR/S: bart.decker@eviden.com
VERSION: 0.0.1
*/

// SCOPE
targetScope = 'subscription' //Deploying at Subscription scope. Scope for Azure Policy can be Management Group(MG) or Subscription. ELZ Azure does not target MGs.

// PARAMETERS
@description('Specify metadata source value required for billing and monitoring')
param policyMetadata string

// Parameter which s
@description('Object which sets the VM antimalware scheduled scan settings used in the DINE policyRule.')
param scheduledScanSettings object

//Parameter used to return the current location of the deployment. The parameter is specifically used for naming the deployment. 
param deployLocation string = deployment().location

@description('Specify name of policy definition for antiMalware Windows Change policy.')
param antiMalwareWindowsChangeDefName string

@description('Specify display name of policy definition for antiMalware Windows Change policy.')
param antiMalwareWindowsChangeDefDisplayName string

@description('Specify name of policy assignment for antiMalware Windows Change policy definition.')
param antiMalwareWindowsChangeDefAssignmentName string

@description('Specify display name of policy assignment for antiMalware Windows Change policy definition.')
param antiMalwareWindowsChangeDefAssignmentDisplayName string

@description('Tag used for the policy rule')
param policyRuleTag array

// VARIABLES

//Variable which holds the definition details
var definitionProperties = {
  description: 'Antimalware windows change policy definition'
  metadata: {
    source: policyMetadata
    version: '0.0.1'
    category: 'Security Center'
  }
  mode: 'All'
  policyType: 'Custom' //The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
}

//Variable which holds the assignment details
var assignmentProperties = {
  #disable-next-line no-loc-expr-outside-params //Policies resources are not deployed to a region, like other resources, but the metadata is stored in a region hence requiring this to keep input parameters reduced.
  location: deployment().location
  identityType: 'SystemAssigned' //The identity type. This is the only required field when adding a system to a resource. Possible values 'None' & 'SystemAssigned'
  description: 'Ensures that AntiMalware agent is installed inside the Virtual Machine.'
  metadata: {
    source: policyMetadata
    version: '0.0.1'
  }
  roleDefinitionIdOrNames: [
    'VM Contributor'
  ]
}

// Variable which holds a unique variable for deployment, which is bound to the subscription id and the location of the policy deployment
var uniqueDeployPrefix = substring(uniqueString(subscription().subscriptionId,deployLocation),0 ,6)

//Variable used to construct the name of the Role Assignment Deployment
var roleAssignmentName = '${first(split(antiMalwareWindowsChangeDefName, '-'))}-${uniqueDeployPrefix}-roleAssignment-deployment'

// RESOURCE DEPLOYMENTS
//Deploy the policy definition
resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2021-06-01' = {
  name: antiMalwareWindowsChangeDefName
  properties: {
    description: definitionProperties.description
    displayName: antiMalwareWindowsChangeDefDisplayName
    metadata: definitionProperties.metadata
    mode: definitionProperties.mode
    parameters: {}
    policyRule: {
      if: {
        allOf: [
          {
            field: 'type'
            equals: 'Microsoft.Compute/virtualMachines'
          }
          {
            field: 'tags.${policyRuleTag[1]}'
            equals: true
          }
          {
            field: 'tags.${policyRuleTag[0]}'
            equals: true
          }
          {
            field: 'Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType'
            contains: 'Windows'
          }
        ]
      }
      then: {
        effect: 'deployIfNotExists'
        details: {
          type: 'Microsoft.Compute/virtualMachines/extensions'
          roleDefinitionIds: [
            '/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c'
          ]
          existenceCondition: {
            allOf: [
              {
                field: 'Microsoft.Compute/virtualMachines/extensions/type'
                equals: 'IaaSAntimalware'
              }
              {
                field: 'Microsoft.Compute/virtualMachines/extensions/publisher'
                equals: 'Microsoft.Azure.Security'
              }
              {
                field: 'Microsoft.Compute/virtualMachines/extensions/provisioningState'
                equals: 'Succeeded'
              }
            ]
          }
          deployment: {
            properties: {
              mode: 'incremental'
              template: {
                '$schema': 'http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#'
                contentVersion: '1.0.0.0'
                parameters: {
                  vmName: {
                    type: 'string'
                  }
                  location: {
                    type: 'string'
                  }
                  scheduledScanSettingsIsEnabled: {
                    type: 'string'
                    defaultValue: 'false'
                    metadata: {
                      description: 'Indicates whether or not custom scheduled scan settings are enabled (default is false)'
                    }
                  }
                  scheduledScanSettingsScanType: {
                    type: 'string'
                    defaultValue: 'Quick'
                    metadata: {
                      description: 'Indicates whether scheduled scan setting type is set to Quick or Full (default is Quick)'
                    }
                  }
                  scheduledScanSettingsDay: {
                    type: 'string'
                    defaultValue: '7'
                    metadata: {
                      description: 'Day of the week for scheduled scan (1-Sunday, 2-Monday, ..., 7-Saturday)'
                    }
                  }
                  scheduledScanSettingsTime: {
                    type: 'string'
                    defaultValue: '120'
                    metadata: {
                      description: 'When to perform the scheduled scan, measured in minutes from midnight (0-1440). For example: 0 = 12AM, 60 = 1AM, 120 = 2AM.'
                    }
                  }
                  exclusionsPaths: {
                    type: 'string'
                    defaultValue: ''
                    metadata: {
                      description: 'Semicolon delimited list of file paths or locations to exclude from scanning'
                    }
                  }
                  exclusionsExtensions: {
                    type: 'string'
                    defaultValue: ''
                    metadata: {
                      description: 'Semicolon delimited list of file extensions to exclude from scanning'
                    }
                  }
                  exclusionsProcesses: {
                    type: 'string'
                    defaultValue: ''
                    metadata: {
                      description: 'Semicolon delimited list of process names to exclude from scanning'
                    }
                  }
                  realtimeProtectionEnabled: {
                    type: 'string'
                    defaultValue: 'true'
                    metadata: {
                      description: 'Indicates whether or not real time protection is enabled (default is true)'
                    }
                  }
                }
                variables: {
                  vmExtensionName: 'IaaSAntimalware'
                  vmExtensionPublisher: 'Microsoft.Azure.Security'
                  vmExtensionType: 'IaaSAntimalware'
                  vmExtensionTypeHandlerVersion: '1.3'
                }
                resources: [
                  {
                    name: '[concat(parameters(\'vmName\'), \'/\', variables(\'vmExtensionName\'))]'
                    type: 'Microsoft.Compute/virtualMachines/extensions'
                    location: '[parameters(\'location\')]'
                    apiVersion: '2018-06-01'
                    properties: {
                      publisher: '[variables(\'vmExtensionPublisher\')]'
                      type: '[variables(\'vmExtensionType\')]'
                      typeHandlerVersion: '[variables(\'vmExtensionTypeHandlerVersion\')]'
                      autoUpgradeMinorVersion: true
                      settings: {
                        AntimalwareEnabled: true
                        RealtimeProtectionEnabled: '[parameters(\'realtimeProtectionEnabled\')]'
                        ScheduledScanSettings: {
                          isEnabled: scheduledScanSettings.isEnabled
                          day: scheduledScanSettings.day
                          time: scheduledScanSettings.time
                          scanType: scheduledScanSettings.scanType
                        }
                        Exclusions: {
                          Extensions: '[parameters(\'exclusionsExtensions\')]'
                          Paths: '[parameters(\'exclusionsPaths\')]'
                          Processes: '[parameters(\'exclusionsProcesses\')]'
                        }
                      }
                    }
                  }
                ]
              }
              parameters: {
                vmName: {
                  value: '[field(\'name\')]'
                }
                location: {
                  value: '[field(\'location\')]'
                }
              }
            }
          }
        }
      }
    }
    policyType: definitionProperties.policyType
  }
}

//Deploy the policy assignment
resource policyAssignment 'Microsoft.Authorization/policyAssignments@2021-06-01' = {
  name: antiMalwareWindowsChangeDefAssignmentName
  location: assignmentProperties.location
  identity: {
    type: assignmentProperties.identityType
  }
  properties: {
    description: assignmentProperties.description
    displayName: antiMalwareWindowsChangeDefAssignmentDisplayName
    metadata: assignmentProperties.metadata
    policyDefinitionId: policyDefinition.id
  }
}

//Deploy the Role assignment for the created Managed Identity
module policySystemManagedIdentityRoleAssignment '../../roleAssignment/roleAssignment.bicep' = {
  name: roleAssignmentName
  params: {
    managedIdentityId: policyAssignment.identity.principalId
    roleDefinitionIdOrNames: assignmentProperties.roleDefinitionIdOrNames
  }
}

// OUTPUTS
output roleAssignmentDeployName string = policySystemManagedIdentityRoleAssignment.name
